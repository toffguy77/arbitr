name: CI

on:
  push:
    branches: [ "**" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true
      - name: Download deps
        run: go mod download
      - name: Lint (go vet)
        run: go vet ./...
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.0
          args: --timeout=5m
      - name: Set version info
        run: |
          echo "VERSION=${GITHUB_REF_TYPE == 'tag' && github.ref_name || 'dev'}" >> $GITHUB_ENV
          echo "COMMIT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        shell: bash
      - name: Unit and integration tests
        run: go test ./...
      - name: Race tests
        run: go test -race ./...
      - name: Build binary (linux/amd64)
        env:
          CGO_ENABLED: 0
          GOOS: linux
          GOARCH: amd64
        run: |
          go build -ldflags "-s -w -X arbitr/internal/infra/version.Version=${VERSION} -X arbitr/internal/infra/version.Commit=${COMMIT} -X arbitr/internal/infra/version.BuildTime=${BUILD_TIME}" -o dist/arbitr ./cmd/arbitrage
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: arbitr-linux-amd64
          path: dist/arbitr

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Set version info
        id: vars
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          SHORT_SHA="${GITHUB_SHA::7}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAG1="$REF_NAME"
          elif [[ "${GITHUB_REF_TYPE}" == "branch" && "${REF_NAME}" == "main" ]]; then
            TAG1="latest"
          else
            TAG1="sha-${SHORT_SHA}"
          fi
          echo "tag1=$TAG1" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        shell: bash
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.tag1 }}
            ghcr.io/${{ github.repository }}:sha-${{ steps.vars.outputs.short_sha }}
          build-args: |
            VERSION=${{ github.ref_type == 'tag' && github.ref_name || 'dev' }}
            COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.event.repository.updated_at }}
